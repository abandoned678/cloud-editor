package com.nic.DAO;

import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.Properties;

public class BaseDAO {
    private static String driver;
    private static String url;
    private static String user;
    private static String password;

    //静态代码块，类加载时就初始化
    static {
        Properties prop = new Properties();
        //通过类加载器读取对应资源
         InputStream is = BaseDAO.class.getClassLoader().getResourceAsStream("db.properties");

         try{
             prop.load(is);
         }catch (IOException e){
             e.printStackTrace();
         }

      driver = prop.getProperty("driver");
         url = prop.getProperty("url");
         user = prop.getProperty("username");
         password = prop.getProperty("password");


    }

    //获取数据库链接
   public static Connection getConnection() {
        Connection conn = null;
        try {
            Class.forName(driver);
            conn= DriverManager.getConnection(url,user,password);
        } catch (ClassNotFoundException | SQLException e) {
            throw new RuntimeException(e);
        }
        return conn;
   }


   //编写查询公告类

    public static ResultSet execute(Connection conn, String sql, Object[] params, ResultSet  resultSet, PreparedStatement preparedStatement) {
        try {
            preparedStatement =conn.prepareStatement(sql);
            for (int i = 0; i < params.length; i++) {
                preparedStatement.setObject(i+1, params[i]);
            }
            resultSet=preparedStatement.executeQuery();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return resultSet;
    }
      //编写增删改公共方法

    public static int execute(Connection conn, String sql, Object[] params,PreparedStatement preparedStatement) {
        int updateRows;
        try {
            preparedStatement = conn.prepareStatement(sql);
            for (int i = 0; i < params.length; i++) {
                preparedStatement.setObject(i + 1, params[i]);
            }
            updateRows = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return updateRows;
    }

  //关闭连接
    public  static  boolean close(Connection conn,PreparedStatement preparedStatement,ResultSet resultSet) {
        boolean flag = true;

        if(resultSet!=null) {
            try {
                resultSet.close();
                //gc回收
                resultSet=null;
            } catch (SQLException e) {
                flag=false;
                throw new RuntimeException(e);

            }
        }

        if(preparedStatement!=null) {
            try {
                preparedStatement.close();
                //gc回收
                preparedStatement=null;
            } catch (SQLException e) {
                flag=false;
                throw new RuntimeException(e);

            }
        }

        if(conn!=null) {
            try {
              conn.close();
                //gc回收
               conn=null;
            } catch (SQLException e) {
                flag=false;
                throw new RuntimeException(e);

            }
        }

        return flag;
    }

}
